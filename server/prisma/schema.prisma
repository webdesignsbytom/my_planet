// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// USERS
enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  role             Role      @default(USER)
  countriesVisited String[]
  firstVisitToSite Boolean   @default(true)
  createdEvents    Event[]   @relation("createdEvents")
  receivedEvents   Event[]   @relation("receivedEvents")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  settings         Setting?
  profiles         Profile[]
}

model Setting {
  id                              String  @id @default(uuid())
  displayLongitudeAndLatitude     Boolean @default(false)
  includeLongitudeAndLatitudeText Boolean @default(false)
  selectedStyle                   String
  rightQatMenu                    Boolean @default(true)
  statisticsContainer             Boolean @default(true)
  animatedSea                     Boolean @default(true)
  antarcticaMode                  Boolean @default(false)
  mouseOverContainerActive        Boolean @default(true)
  realTimeSettings                Boolean @default(true)
  sunAndMoon                      Boolean @default(true)
  displayCountryNames             Boolean @default(true)
  isMuted                         Boolean @default(true)
  visitedVisible                  Boolean @default(true)
  unvisitedVisible                Boolean @default(true)
  user                            User    @relation(fields: [userId], references: [id])
  userId                          String  @unique
}

model Profile {
  id              String  @id @default(uuid())
  instagramId     String?
  customHashtag   String?
  firstName       String?
  lastName        String?
  preferedName    String?
  gender          String?
  countryOfBirth  String?
  favoriteCountry String?
  hobbies         String?
  specialHashtags String?
  hiddenHashtags  String?
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  PURCHASE
  MINING
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
